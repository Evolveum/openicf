import expect4j.Closure;
import expect4j.Expect4j;
import expect4j.ExpectState;
import expect4j.ExpectUtils;
import expect4j.matches.Match;
import expect4j.matches.RegExpMatch;
import expect4j.matches.TimeoutMatch;
import org.identityconnectors.vms.VmsConfiguration;
import org.identityconnectors.vms.VmsMessages;
import org.identityconnectors.framework.common.exceptions.ConnectorException;

buffer = new StringBuffer();

if (configuration.getSSH())
    expect4j = ExpectUtils.SSH(configuration.getHostNameOrIpAddr(), USERNAME, new String(CURRENT_PASSWORD), configuration.getHostPortNumber());
else
    expect4j = ExpectUtils.telnet(configuration.getHostNameOrIpAddr(), configuration.getHostPortNumber());

class StringClosure implements Closure {
	StringBuffer buffer;
	Expect4j expect4j;
	String string;
	VmsConfiguration configuration;
	public StringClosure(StringBuffer buffer, Expect4j expect4j, String string, VmsConfiguration configuration) {
		this.buffer = buffer;
		this.expect4j = expect4j;
		this.string = string;
		this.configuration = configuration;
	}
    public void run(ExpectState state) {
        buffer.append(state.getBuffer());
    	expect4j.send(string+configuration.getRealHostLineTerminator());
    	state.exp_continue();
    }
};

class TimeoutClosure implements Closure {
	VmsConfiguration configuration;
	public TimeoutClosure(VmsConfiguration configuration) {
		this.configuration = configuration;
	}
    public void run(ExpectState state) {
        ConnectorException e = new ConnectorException("timeout in waitFor:"+state.getBuffer());
        throw e;
    }
};

class ExpiredClosure implements Closure {
	StringBuffer buffer;
	Expect4j expect4j;
	public ExpiredClosure(StringBuffer buffer, Expect4j expect4j) {
		this.buffer = buffer;
		this.expect4j = expect4j;
	}
    public void run(ExpectState state) {
        buffer.append(state.getBuffer());
        state.addVar("changeIssued", Boolean.TRUE);
    	state.exp_continue();
    }
};

class SetPasswordClosure implements Closure {
	StringBuffer buffer;
	Expect4j expect4j;
	VmsConfiguration configuration;
	public SetPasswordClosure(StringBuffer buffer, Expect4j expect4j, VmsConfiguration configuration) {
		this.buffer = buffer;
		this.expect4j = expect4j;
		this.configuration = configuration;
	}
    public void run(ExpectState state) {
    	// If we have not seen "Your password has expired", we
    	// need to issue a SET PASSWORD command once. Otherwise,
    	// we've changed the password.
    	//
    	if (!Boolean.TRUE.equals(state.getVar("changeIssued"))) {
            buffer.append(state.getBuffer());
    		expect4j.send("SET PASSWORD"+configuration.getRealHostLineTerminator());
            state.addVar("changeIssued", Boolean.TRUE);
        	state.exp_continue();
    	}
    }
};

Match[] matches = new Match[7];

// Specify old password as part of login or SET PASSWORD command
//
matches[0] = new RegExpMatch("ld password:", new StringClosure(buffer, expect4j, new String(CURRENT_PASSWORD), configuration));

// Specify new password as part of login or SET PASSWORD command
//
matches[1] = new RegExpMatch("ew password:", new StringClosure(buffer, expect4j, new String(NEW_PASSWORD), configuration));

// Specify SET PASSWORD command if we have VMS prompt, and
// did not see "Your password has expired" message
//
matches[2] = new RegExpMatch("\$", new SetPasswordClosure(buffer, expect4j, configuration));

// If we see "Your password has expired", set a flag, so we'll
// know not to issue a SET PASSWORD
//
matches[3] = new RegExpMatch("Your password has expired", new ExpiredClosure(buffer, expect4j));

// Specify the user name to log in
//
matches[4] = new RegExpMatch("Username:", new StringClosure(buffer, expect4j, USERNAME, configuration));

// Normal (non-forced change) password
//
matches[5] = new RegExpMatch("Password:", new StringClosure(buffer, expect4j, new String(CURRENT_PASSWORD), configuration));

matches[6] = new TimeoutMatch(SHORT_WAIT, new TimeoutClosure(configuration));

expect4j.expect(matches);
expect4j.send("LOGOUT"+configuration.getRealHostLineTerminator());
return buffer.toString();
