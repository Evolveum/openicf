import expect4j.Closure;
import expect4j.Expect4j;
import expect4j.ExpectState;
import expect4j.ExpectUtils;
import expect4j.matches.Match;
import expect4j.matches.RegExpMatch;
import expect4j.matches.TimeoutMatch;
import org.identityconnectors.vms.VmsConfiguration;
import org.identityconnectors.vms.VmsMessages;
import org.identityconnectors.framework.common.exceptions.ConnectorException;

buffer = new StringBuffer();

if (configuration.getSSH())
    expect4j = ExpectUtils.SSH(configuration.getHostNameOrIpAddr(), USERNAME, new String(CURRENT_PASSWORD), configuration.getHostPortNumber());
else
    expect4j = ExpectUtils.telnet(configuration.getHostNameOrIpAddr(), configuration.getHostPortNumber());

class StringClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    String string;
    VmsConfiguration configuration;
    public StringClosure(StringBuffer buffer, Expect4j expect4j, String string, VmsConfiguration configuration) {
        this.buffer = buffer;
        this.expect4j = expect4j;
        this.string = string;
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("StringClosure["+string+"]="+state.getBuffer());
        buffer.append(state.getBuffer());
        expect4j.send(string+configuration.getRealHostLineTerminator());
        state.exp_continue();
    }
};

class PasswordHasBeenSetClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    String string;
    VmsConfiguration configuration;
    public PasswordHasBeenSetClosure(StringBuffer buffer, Expect4j expect4j, String string, VmsConfiguration configuration) {
        this.buffer = buffer;
        this.expect4j = expect4j;
        this.string = string;
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("PasswordHasBeenSetClosure["+string+"]="+state.getBuffer());
        buffer.append(state.getBuffer());
        expect4j.send(string+configuration.getRealHostLineTerminator());
        state.addVar("passwordSet", Boolean.TRUE);
        state.exp_continue();
    }
};

class TimeoutClosure implements Closure {
    VmsConfiguration configuration;
    public TimeoutClosure(VmsConfiguration configuration) {
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("TimeoutClosure");
        ConnectorException e = new ConnectorException("timeout in waitFor:"+state.getBuffer());
        throw e;
    }
};

class ExpiredClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    public ExpiredClosure(StringBuffer buffer, Expect4j expect4j) {
        this.buffer = buffer;
        this.expect4j = expect4j;
    }
    public void run(ExpectState state) {
        //System.out.println("ExpiredClosure="+state.getBuffer());
        buffer.append(state.getBuffer());
        state.addVar("changeIssued", Boolean.TRUE);
        state.exp_continue();
    }
};

class SetPasswordClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    VmsConfiguration configuration;
    public SetPasswordClosure(StringBuffer buffer, Expect4j expect4j, VmsConfiguration configuration) {
        this.buffer = buffer;
        this.expect4j = expect4j;
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("SetPasswordClosure="+state.getBuffer());
        //System.out.println("SetPasswordClosure="+state.getVar("changeIssued"));
        // If we have not seen "Your password has expired", we
        // need to issue a SET PASSWORD command once. Otherwise,
        // we've changed the password.
        //
        if (!Boolean.TRUE.equals(state.getVar("changeIssued"))) {
            //System.out.println("Issuing SET PASSWORD");
            buffer.append(state.getBuffer());
            expect4j.send("SET PASSWORD"+configuration.getRealHostLineTerminator());
            state.addVar("changeIssued", Boolean.TRUE);
            state.exp_continue();
        }
        if (!Boolean.TRUE.equals(state.getVar("passwordSet"))) {
            state.exp_continue();
        }
    }
};

class ErrorClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    public ErrorClosure(StringBuffer buffer, Expect4j expect4j) {
        this.buffer = buffer;
        this.expect4j = expect4j;
    }
    public void run(ExpectState state) {
        //System.out.println("ErrorClosure="+state.getBuffer());
        //
        throw new ConnectorException(state.getBuffer());
    }
};

Match[] matches = new Match[9];

// Specify old password as part of login or SET PASSWORD command
//
matches[0] = new RegExpMatch("ld password:", new StringClosure(buffer, expect4j, CURRENT_PASSWORD, configuration));

// Specify new password as part of login or SET PASSWORD command
//
matches[1] = new RegExpMatch("ew password:", new StringClosure(buffer, expect4j, NEW_PASSWORD, configuration));

// Specify new password as part of login or SET PASSWORD command
//
matches[2] = new RegExpMatch("erification:", new PasswordHasBeenSetClosure(buffer, expect4j, NEW_PASSWORD, configuration));

// Specify SET PASSWORD command if we have VMS prompt, and
// did not see "Your password has expired" message
//
matches[3] = new RegExpMatch("[\\\$] ", new SetPasswordClosure(buffer, expect4j, configuration));

// If we see "Your password has expired", set a flag, so we'll
// know not to issue a SET PASSWORD
//
matches[4] = new RegExpMatch("Your password has expired", new ExpiredClosure(buffer, expect4j));

// Specify the user name to log in
//
matches[5] = new RegExpMatch("Username:", new StringClosure(buffer, expect4j, USERNAME, configuration));

// Normal (non-forced change) password
//
matches[6] = new RegExpMatch("Password:", new StringClosure(buffer, expect4j, CURRENT_PASSWORD, configuration));

matches[7] = new TimeoutMatch(5000, new TimeoutClosure(configuration));

// Catch errors, and report them
//
matches[8] = new RegExpMatch("%SET-\\w-[^\\n]*\\n", new ErrorClosure(buffer, expect4j));

expect4j.expect(matches);

//System.out.println("logging out");
expect4j.send("LOGOUT"+configuration.getRealHostLineTerminator());
return buffer.toString();
