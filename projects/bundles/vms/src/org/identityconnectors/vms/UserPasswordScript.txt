import expect4j.Closure;
import expect4j.Expect4j;
import expect4j.ExpectState;
import expect4j.ExpectUtils;
import expect4j.matches.Match;
import expect4j.matches.RegExpMatch;
import expect4j.matches.TimeoutMatch;
import org.identityconnectors.vms.VmsConfiguration;
import org.identityconnectors.vms.VmsMessages;
import org.identityconnectors.framework.common.exceptions.ConnectorException;

buffer = new StringBuffer();

if (CONFIGURATION.getSSH())
    expect4j = ExpectUtils.SSH(CONFIGURATION.getHostNameOrIpAddr(), USERNAME, CURRENT_PASSWORD, CONFIGURATION.getHostPortNumber());
else
    expect4j = ExpectUtils.telnet(CONFIGURATION.getHostNameOrIpAddr(), CONFIGURATION.getHostPortNumber());

class TimeoutClosure implements Closure {
    VmsConfiguration configuration;
    public TimeoutClosure(VmsConfiguration configuration) {
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("TimeoutClosure");
        ConnectorException e = new ConnectorException("timeout in waitFor:"+state.getBuffer());
        throw e;
    }
};

class ExpiredClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    public ExpiredClosure(StringBuffer buffer, Expect4j expect4j) {
        this.buffer = buffer;
        this.expect4j = expect4j;
    }
    public void run(ExpectState state) {
        //System.out.println("ExpiredClosure="+state.getBuffer());
        buffer.append(state.getBuffer());
        state.addVar("changeIssued", Boolean.TRUE);
        state.exp_continue();
    }
};

class SetPasswordClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    VmsConfiguration configuration;
    public SetPasswordClosure(StringBuffer buffer, Expect4j expect4j, VmsConfiguration configuration) {
        this.buffer = buffer;
        this.expect4j = expect4j;
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("SetPasswordClosure="+state.getBuffer());
        //System.out.println("SetPasswordClosure="+state.getVar("changeIssued"));
        // If we have not seen "Your password has expired", we
        // need to issue a SET PASSWORD command once. Otherwise,
        // we've changed the password.
        //
        if (!Boolean.TRUE.equals(state.getVar("changeIssued"))) {
            //System.out.println("Issuing SET PASSWORD");
            buffer.append(state.getBuffer());
            expect4j.send("SET PASSWORD"+configuration.getRealHostLineTerminator());
            state.addVar("changeIssued", Boolean.TRUE);
            state.exp_continue();
        }
        if (!Boolean.TRUE.equals(state.getVar("passwordSet"))) {
            state.exp_continue();
        }
    }
};

class StringClosure implements Closure {
    StringBuffer buffer;
    Expect4j expect4j;
    String string;
    VmsConfiguration configuration;
    public StringClosure(StringBuffer buffer, Expect4j expect4j, String string, VmsConfiguration configuration) {
        this.buffer = buffer;
        this.expect4j = expect4j;
        this.string = string;
        this.configuration = configuration;
    }
    public void run(ExpectState state) {
        //System.out.println("StringClosure["+string+"]="+state.getBuffer());
        buffer.append(state.getBuffer());
        expect4j.send(string+configuration.getRealHostLineTerminator());
        state.exp_continue();
    }
};

class PasswordHasBeenSetClosure extends StringClosure {
    public PasswordHasBeenSetClosure(StringBuffer buffer, Expect4j expect4j, String string, VmsConfiguration configuration) {
        super(buffer, expect4j, string, configuration);
    }
    public void run(ExpectState state) {
        super.run(state);
        state.addVar("passwordSet", Boolean.TRUE);
    }
};

class ErrorClosure implements Closure {
    public ErrorClosure() {
    }
    public void run(ExpectState state) {
        //System.out.println("ErrorClosure="+state.getBuffer());
        //
        throw new ConnectorException(state.getBuffer());
    }
};

Match[] matches = [
    // Specify the user name to log in
    //
    new RegExpMatch("Username:", new StringClosure(buffer, expect4j, USERNAME, CONFIGURATION)),
    
    // Normal (non-forced change) password
    //
    new RegExpMatch("Password:", new StringClosure(buffer, expect4j, CURRENT_PASSWORD, CONFIGURATION)),
    
    // Specify old password as part of login or SET PASSWORD command
    //
    new RegExpMatch("ld password:", new StringClosure(buffer, expect4j, CURRENT_PASSWORD, CONFIGURATION)),
    
    // Specify new password as part of login or SET PASSWORD command
    //
    new RegExpMatch("ew password:", new StringClosure(buffer, expect4j, NEW_PASSWORD, CONFIGURATION)),
    
    // Specify new password as part of login or SET PASSWORD command
    //
    new RegExpMatch("erification:", new PasswordHasBeenSetClosure(buffer, expect4j, NEW_PASSWORD, CONFIGURATION)),
    
    // Specify SET PASSWORD command if we have VMS prompt, and
    // did not see "Your password has expired" message
    //
    new RegExpMatch("[\\\$] ", new SetPasswordClosure(buffer, expect4j, CONFIGURATION)),
    
    // If we see "Your password has expired", set a flag, so we'll
    // know not to issue a SET PASSWORD
    //
    new RegExpMatch("Your password has expired", new ExpiredClosure(buffer, expect4j)),
    
    // Catch errors, and report them
    //
    new RegExpMatch("User authorization failure\\n", new ErrorClosure()),
    new RegExpMatch("%SET-\\w-[^\\n]*\\n", new ErrorClosure()),
    
    
    new TimeoutMatch(SHORT_WAIT, new TimeoutClosure(CONFIGURATION))
];
expect4j.expect(matches);

//System.out.println("logging out");
expect4j.send("LOGOUT"+CONFIGURATION.getRealHostLineTerminator());
return buffer.toString();
