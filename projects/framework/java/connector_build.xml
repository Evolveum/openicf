<!--
  ====================
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
  Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.     
  
  The contents of this file are subject to the terms of the Common Development 
  and Distribution License("CDDL") (the "License").  You may not use this file 
  except in compliance with the License.
  
  You can obtain a copy of the License at 
  http://IdentityConnectors.dev.java.net/legal/license.txt
  See the License for the specific language governing permissions and limitations 
  under the License. 
  
  When distributing the Covered Code, include this CDDL Header Notice in each file
  and include the License file at identityconnectors/legal/license.txt.
  If applicable, add the following below this CDDL Header, with the fields 
  enclosed by brackets [] replaced by your own identifying information: 
  "Portions Copyrighted [year] [name of copyright owner]"
  ====================
-->
<project name="connector-build" default="all">
    <description>
    + ==\_/================================================================== +
    +  \(_)/ This is the default build for any Connector.                     +
    +  -(_)- (Since this file is imported any target can be overridden)       +
    +  /(_)\                                                                  +
    + =========================================================S=U=N=.=C=O=M= +
    </description>
    <!-- set a default for testConfig -->
    <property name="testConfig" value="default"/>
    <!-- load user global properties -->
    <property file="${user.home}/.connectors/connectors.properties" />

    <!-- load local properties -->
    <property file="build.properties" />
    <!-- calculate the version from various properties -->
    <property name="BUILD_NUMBER" value="x" />
    <!-- set default properties for this build -->
    <property name="src.main.java" value="src/main/java" />
    <property name="src.test.java" value="src/test/java" />
    <property name="src.main.resources" value="src/main/resources" />
    <property name="src.test.resources" value="src/test/resources" />
    <!-- Path to optional configuration and libraries needed for connector compilation or tests -->
    <property name="dependencies.private" value="${user.home}/.connectors/${ant.project.name}"/>
    <property name="config.public" value="src/test/config" />
    <property name="config.private" value="${dependencies.private}/config" />
    <property name="lib" value="lib" />
    <property name="native" value="native" />
    <property name="dist" value="dist" />
    <property name="build" value="build" />
    <property name="build.main" value="build/classes" />
    <property name="build.test" value="build/test-classes" />
    <property name="build.test.config" value="build/test-config" />
    <property name="reports" value="reports" />
    <property name="instrumented" value="instrumented" />
    <property name="java.debug" value="true" />
    <property name="java.source" value="1.5" />
    <property name="java.target" value="1.5" />
    <property name="java.compilerargs" value="" />
    <property name="javadoc.author" value="true" />
    <property name="license.file" value="${framework.dir}/../license.txt" />
    <property name="thirdpartyreadme.file" value="${framework.dir}/../THIRDPARTYREADME.txt" />
    <property name="failontestfailure" value="false"/>
    <!--
        Check if directories exist.
    -->
        <condition property="src.main.java.exists">
            <available type="dir" file="${src.main.java}"/>
        </condition>
        <condition property="src.main.resources.exists">
            <available type="dir" file="${src.main.resources}"/>
        </condition>
        <condition property="src.test.java.exists">
            <available type="dir" file="${src.test.java}"/>
        </condition>
        <condition property="src.test.resources.exists">
            <available type="dir" file="${src.test.resources}"/>
        </condition>
        <condition property="config.public.exists">
            <available type="dir" file="${config.public}"/>
        </condition>
        <condition property="config.private.exists">
            <available type="dir" file="${config.private}"/>
        </condition>
        <condition property="is.svn.working.directory">
                <available file=".svn" type="dir"/>
        </condition>
        
    <!--
        Determine if this a coverage build.
    -->
    <condition property="useCobertura">
        <available type="dir" file="${cobertura.home}" />
    </condition>
    <!--
        Determine if Findbugs is available to use.
    -->
    <condition property="useFindbugs">
        <available type="dir" file="${findbugs.home}" />
    </condition>
    <!--
        Determines if there will be an external reporting engine.
    -->
    <condition property="useExternalReporting">
        <istrue value="${external.reporting}" />
    </condition>
    <!--
       Pattern Sets
    -->
    <patternset id='ignore'>
        <!-- exclude all cvs patterns -->
        <exclude name='**/CVS/**' />
        <exclude name='**/.cvsignore' />
        <exclude name='**/.svn' />
        <!-- exclude all backups produced by editors -->
        <exclude name='**/*~' />
        <exclude name='**/.#*' />
        <exclude name='**/#*#' />
        <exclude name='**/%*%' />
        <exclude name='**/*.swp' />
    </patternset>
    <patternset id="exclude.javasrc">
        <patternset refid='ignore'/>
        <exclude name="**/*.java" />
    </patternset>
    <!--
        Path to add additional bundle dependencies.
    -->
    <path id="ext.path"/>    
    <!--
       Libraries that will be packaged w/ the Connector
    --> 
    <fileset id="dist.libs" dir="${basedir}" includes="${lib}/*.jar"/>
    <!--
        Libraries that will be used during testing.
    -->
    <fileset id="test.libs" dir="${basedir}" includes="${lib}/test/*.jar"/>
    <!--
        Libraries that will be used during building.
    -->
    <fileset id="build.libs" dir="${basedir}" includes="${lib}/build/*.jar"/>
    <!--
        Native libraries.
    -->
    <fileset id="native.libs" dir="${basedir}" includes="${native}/*"/>
    <!--
        User Libraries
    -->
    
    <condition property="user.common.libs" value="${dependencies.private}/lib" else="">
        <available file="${dependencies.private}/lib" type="dir"/>
    </condition>        
    <condition property="user.config.libs" value="${dependencies.private}/lib/${testConfig}" else="">
        <available file="${dependencies.private}/lib/${testConfig}" type="dir"/>
    </condition>        
        
    <path id="user.libs" >
        <fileset dir="${user.config.libs}">
                <include name="*.jar"/>
        </fileset>        
        <fileset dir="${user.common.libs}">
                <include name="*.jar"/>
        </fileset>        
    </path>        

    <!--
        Classpath to build the Connector.
    -->
    <path id="build.path">
        <fileset refid="dist.libs" />
        <fileset refid="build.libs" />
        <fileset dir="${framework.dir}/dist"
            includes="*.jar" 
            excludes="connector-framework-internal*.jar" />
    </path>
    <path id="test.build.path">
        <pathelement path="${build.main}"/>
        <fileset refid="test.libs" />
        <path refid="build.path" />
    </path>
    <path id="test.run.path">
        <fileset dir="${framework.dir}/dist" 
            includes="connector-framework-internal*.jar" />
        <path refid="test.build.path" />
    </path>
    <!-- Libraries available to use from the Groovy console -->
    <path id="console.path">
        <fileset dir="${framework.dir}/dist" includes="*.jar"/>
        <fileset refid="build.libs"/>
        <fileset refid="test.libs"/>
        <fileset refid="dist.libs"/>
        <path refid="user.libs"/>
        <fileset file="${jar.file}"/>
    </path>
    
    <!--
        Display Banner
    -->
    <echo>
        Building Project:  ${ant.project.name}
    </echo>

    <target name="-pre-compile-extra" description="Override this for pre-compile."/>
    <target name="-pre-compile-test-extra" description="Override this for pre-compile-test."/>

    <!--
       Base Compile Target
    -->

    <target name="compile-main" depends="compile-check, -pre-compile-extra, compile-main-internal, copy-main-resources" description="compile all main files"/>

    <target name="compile-check">
        <fail unless="src.main.java.exists" message="Source folder ${src.main.java} does not exist. You may be using the old source layout, in which the Java source files are in a directory named src. In that case, import the toolkit's connector_build_old.xml and consider modifying your source layout according to http://identityconnectors.dev.java.net/issues/show_bug.cgi?id=395."/>
    </target>                

    <target name="compile-main-internal">
        <mkdir dir="${build.main}" />
        <javac
            debug="${java.debug}" 
            srcdir="${src.main.java}" destdir="${build.main}" 
            target="${java.target}" source="${java.source}">
            <classpath>
                <path refid="build.path"/>
                <path refid="user.libs"/>
            </classpath>
            <compilerarg line="${java.compilerargs}"/>
        </javac>
        <!-- We support resources also in src/main/java, so copy to build -->
        <copy todir="${build.main}">
            <fileset dir="${src.main.java}">
                <patternset refid="exclude.javasrc" />
            </fileset>
        </copy>
    </target>

    <target name="copy-main-resources" if="src.main.resources.exists">
        <mkdir dir="${build.main}" />
        <copy todir="${build.main}">
            <fileset dir="${src.main.resources}"/>
        </copy>
    </target>                                                

    <target name="compile-test" depends="-pre-compile-test-extra, compile-test-internal, copy-test-resources, copy-public-config, copy-private-config" description="compile all test files"/>

    <target name="compile-test-internal" depends="-pre-compile-test-extra" if="src.test.java.exists"
        description="compile all test files">
        <mkdir dir="${build.test}" />
        <javac
            debug="${java.debug}" 
            srcdir="${src.test.java}" destdir="${build.test}" 
            target="${java.target}" source="${java.source}">
            <classpath>
                <path refid="test.build.path"/>
                <path refid="user.libs"/>
            </classpath>
            <compilerarg line="${java.compilerargs}"/>
        </javac>
        <!-- Copy resources from src/test/java -->
        <copy todir="${build.test}">
            <fileset dir="${src.test.java}">
                <patternset refid="exclude.javasrc" />
            </fileset>
        </copy>
    </target>

    <target name="copy-test-resources" if="src.test.resources.exists">
        <mkdir dir="${build.test}" />
        <copy todir="${build.test}">
            <fileset dir="${src.test.resources}"/>
        </copy>
    </target>

    <target name="copy-public-config" if="config.public.exists">
        <mkdir dir="${build.test.config}"/>
        <copy todir="${build.test.config}">
            <fileset dir="${config.public}"/>
        </copy>
    </target>

    <target name="copy-private-config" if="config.private.exists">
        <mkdir dir="${build.test.config}"/>
        <copy todir="${build.test.config}">
            <fileset dir="${config.private}"/>
        </copy>
    </target>

    <!--
       Bundle Building Target
    -->

    <target name="dist" depends="jar, jar-test, javadoc, set-version"
        description="generates the distribution (excludes test classes)">
        <property name="zip.file" value="${ConnectorBundle-Name}-${ConnectorBundle-Version}.zip" />
        <zip destfile="${zip.file}" basedir="${dist}" excludes="test/**"/>
        <move file="${zip.file}" todir="${dist}"/>
    </target>
    
    <target name="set-revision" if="is.svn.working.directory">
        <tempfile property="svn.info.tmp" prefix="svn-info" suffix=".tmp"/>
        <exec executable="svn" output="${svn.info.tmp}" failifexecutionfails="false">
                <arg line="info --xml"/>
        </exec>
        <xmlproperty file="${svn.info.tmp}" prefix="svn" collapseAttributes="true"/>
        <delete file="${svn.info.tmp}" failonerror="false"/>
    </target>
    
    <target name="set-version" depends="set-revision">
        <condition property="SVN_REVISION" value="${svn.info.entry.commit.revision}" else="x">
                <isset property="svn.info.entry.commit.revision"/>
        </condition>
        <property name="ConnectorBundle-Version" value="${MAJOR}.${MINOR}.${SVN_REVISION}"/>
    </target>
    

    <target name="jar" depends="compile-main, set-version">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />
        <property name="jar.file" value="${dist}/${ConnectorBundle-Name}-${ConnectorBundle-Version}.jar" />
        
        <echo>
               Building jar:  ${jar.file}
        </echo>
        
        
        <jar jarfile="${jar.file}" index="true">
            <!-- include all compiled classes -->
            <fileset dir="${build.main}">
                <patternset refid="ignore" />
            </fileset>
            <!-- include all 3rd party deps -->
            <fileset refid="dist.libs" />
            <!-- include all native libs -->
            <fileset refid="native.libs" />
            <!-- include license -->
            <fileset file="${license.file}"/>
            <fileset file="${thirdpartyreadme.file}"/>
            <manifest>
                <attribute name="ConnectorBundle-FrameworkVersion" value="${ConnectorBundle-FrameworkVersion}" />
                <attribute name="ConnectorBundle-Name" value="${ConnectorBundle-Name}" />
                <attribute name="ConnectorBundle-Version" value="${ConnectorBundle-Version}" />
                <attribute name="Build-Number" value="${BUILD_NUMBER}" />
                <attribute name="Subversion-Revision" value="${SVN_REVISION}" />
            </manifest>
        </jar>
    </target>

    <target name="jar-test" depends="compile-test, set-version">
        <mkdir dir="${dist}/test" />
        <property name="jar.test.file" value="${dist}/test/${ConnectorBundle-Name}-${ConnectorBundle-Version}-tests.jar" />
        
        <echo>
               Building test jar:  ${jar.test.file}
        </echo>
        
        <jar jarfile="${jar.test.file}">
            <!-- include all compiled test classes and resources -->
            <fileset dir="${build.test}"/>
            <!-- include license -->
            <fileset file="${license.file}"/>
            <fileset file="${thirdpartyreadme.file}"/>
        </jar>
    </target>



    <!--
       Base Clean Target
    -->
    <target name="clean" depends="-pre-clean-extra" description="clean up">
        <delete dir="${dist}" />
        <delete dir="${build}" />
        <delete dir="${reports}" />
        <delete file="cobertura.ser" />
        <delete dir="${instrumented}" />
    </target>

    <target name="-pre-clean-extra" description="Override this for pre cleaning"/>

    <!--
        Findbugs Targets
    -->
    <target name="findbugs" depends="dist" if="useFindbugs">
        <!-- create report directory -->
        <mkdir dir="${reports}/findbugs" />
        <!-- create task for use -->
        <taskdef name="findbugs" 
            classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
                <fileset dir="${findbugs.home}/lib" includes="**/*.jar"/>
            </classpath>
        </taskdef>
        <mkdir dir="${reports}" />
        <!-- determine the type of report -->
        <condition property="findbugs.report.type" value="xml" else="html">
            <isset property="useExternalReporting" />
        </condition>
        <!-- execute analysis -->
        <findbugs 
            jvmargs="-Xmx256M"
            timeout="3600000"
            home="${findbugs.home}"
            output="${findbugs.report.type}"
            outputFile="${reports}/findbugs/report.${findbugs.report.type}">
            <auxClassPath>
                <path refid="build.path" />
                <path refid="user.libs"/>
            </auxClassPath>
            <sourcePath>
                <pathelement location="${src.main.java}"/>
            </sourcePath>
            <!-- core jar files -->
            <class location="${jar.file}"/>
        </findbugs>
    </target>
    <!--
        Test Targets 
    -->
    <target  name="-pre-test-extra" description="Override this to execute tasks before the unit tests run"/>
    <target name="test" depends="jar, compile-test, -pre-test-extra, run-unit-tests, run-contract-tests, report-tests" />
    <target name="test-init">
        <!-- clear out previous test results -->
        <delete dir="${reports}/junit" />
        <mkdir dir="${reports}/junit" />
    </target>
    <!--
        Run unit tests with converage..
    -->
    <target name="cobertura-init" if="useCobertura">
        <path id="cobertura.classpath">
            <fileset dir="${cobertura.home}">
                <include name="cobertura.jar" />
                <include name="lib/**/*.jar" />
            </fileset>
        </path>
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    </target>
    <target name="instrument" depends="cobertura-init" if="useCobertura">
        <delete file="cobertura.ser" />
        <delete dir="${instrumented}" />
        <mkdir dir="${instrumented}" />
        <cobertura-instrument todir="${instrumented}">
            <fileset dir="${build.main}">
                <patternset refid="ignore"/>
            </fileset>
        </cobertura-instrument>
    </target>
    <target 
        name="build-testclasspath" 
        unless="useCobertura"
        depends="build-testclasspath-with-coverage">
        <path id="test-classpath">
            <path refid="test.run.path" />
            <pathelement location="${build.test.config}" />
            <pathelement location="${build.test}" />
            <pathelement location="${build.main}" />
        </path>
    </target>
    <target name="build-testclasspath-with-coverage" if="useCobertura">
        <!--
            Note the classpath order: instrumented classes are before the
            original (uninstrumented) classes.  This is important.
            The instrumented classes reference classes used by the
            Cobertura runtime, so Cobertura and its dependencies
             must be on your classpath.
         -->
        <path id="test-classpath">
            <path refid="cobertura.classpath" />
            <pathelement location="${instrumented}" />
            <path refid="test.run.path" />
            <pathelement location="${build.test.config}" />
            <pathelement location="${build.test}" />
            <pathelement location="${build.main}" />
        </path>
    </target>
    <target name="run-unit-tests" depends="test-init, instrument, build-testclasspath" if="src.test.java.exists">
        <echo message="Running junit tests with testConfig=[${testConfig}]"/>
        <!-- run all the junits -->
        <junit fork="yes" forkmode="once" dir="${basedir}" failureProperty="test.failed" printsummary="true" haltonfailure="${failontestfailure}">
            <!--
                Specify the name of the coverage data file to use.
                The value specified below is the default.
            -->
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
            
            <!-- Set the key for TestHelpers to use -->
            <sysproperty key="project.name" value="${ant.project.name}"/>
            <sysproperty key="testConfig" value="${testConfig}"/>

            <!--
                Add the native libraries directory to java.library.path. Normally the framework takes care
                of loading the bundled native libraries, so modifying java.library.path
                would not be necessary. If the unit tests
                bypass the framework and call the SPI directly, the native
                libraries will only be searched on java.library.path.
            -->
            <sysproperty key="java.library.path" value="${basedir}${file.separator}${native}${path.separator}${java.library.path}"/>

            <!-- reference the test classpath -->
            <classpath>
                <path refid="test-classpath" />
                <path refid="user.libs" />
            </classpath>

            <!-- output in xml for build automation -->
            <formatter type="xml" />
            <formatter type="brief" usefile="false" unless="useExternalReporting" />
            <!-- turn full assertions -->
            <assertions enableSystemAssertions="true" />
            <batchtest todir="${reports}/junit">
                <fileset dir="${src.test.java}">
                    <include name="**/*Test.java" />
                    <include name="**/*Tests.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>
    <target name="report-tests" depends="report-junits, report-instrument"/>
    <target name="report-instrument" if="useCobertura">
        <mkdir dir="${reports}/coverage" />
        <delete dir="${reports}/coverage" />
        <delete dir="${reports}/coverage.xml" />
        <condition property="cobertura-format" value="xml" else="html">
            <isset property="useExternalReporting" />
        </condition>
        <condition property="cobertura-directory" value="" else="/coverage">
            <isset property="useExternalReporting" />
        </condition>
        <cobertura-report format="${cobertura-format}" 
            destdir="${reports}${cobertura-directory}" srcdir="${src.main.java}" />
    </target>

    <target name="report-junits" unless="useExternalReporting"> 
        <fileset id="report.set" dir="${reports}">
                <include name="**/junit/TEST-*.xml"/>
            <include name="**/contracts/TEST-*.xml"/>
        </fileset> 
        <junitreport todir="${reports}">
            <fileset refid="report.set"/>
            <report format="noframes" todir="${reports}"/>
        </junitreport>
    </target>
    <!--
        Contract Tests
    -->
    <property name="contract.jar.file" value="${reports}/connector.jar" />
    <property name="contract-package" value="org.identityconnectors.contract"/>
    <property name="contract.suite.classname" value="${contract-package}.test.ContractTestSuite"/>
    <property name="data.provider" value="${contract-package}.data.GroovyDataProvider"/>                

    <target name="contract-check">
        <condition property="do.contracts.run">
            <istrue value="${contracts.run}"/>
        </condition>
    </target>
    <target name="contract-init" depends="contract-check, contract-custompath" if="do.contracts.run">
        <!-- clear out previous test results -->
        <delete dir="${reports}/contracts" />
        <mkdir dir="${reports}/contracts" />
        <path id="contract.classpath">
                <path refid="contract.custompath"/>
                <fileset dir="${framework.dir}/dist" includes="*.jar"/>
                <pathelement location="${build.test.config}"/>
        </path>
    </target>
    <target name="contract-custompath">
        <path id="contract.custompath"/>
    </target>            
    <target name="contract-dist" if="do.contracts.run" depends="contract-check, jar"> 
        <!-- creates a temparary jar for contract testing -->
        <delete dir="${reports}/rejar"/>
        <mkdir dir="${reports}/rejar"/>
        <unjar src="${jar.file}" dest="${reports}/rejar"/>
        <!-- copy the user libs -->
        <copy todir="${reports}/rejar/lib">
            <path refid="user.libs"/>
        </copy>
        <!-- create a new jar -->
        <jar jarfile="${contract.jar.file}" manifest="${reports}/rejar/META-INF/MANIFEST.MF">
            <fileset dir="${reports}/rejar"/>
        </jar>
    </target>
    <target name="contract-tests" if="do.contracts.run" depends="contract-check, set-version, copy-public-config, copy-private-config">
        <fail unless="connectorName" message="To run contract tests, you must specify [connectorName] property with the value equal to FQN of your connector class"/>
        <property name="test.parameters.outFile" value=""/>
        <!-- run all the contract tests -->
        <echo message="Running contract tests with testConfig=[${testConfig}]"/>
        <junit fork="yes" printsummary="yes" forkmode="once" failureproperty="test.failure" errorproperty="test.error" maxmemory="512M" haltonfailure="${failontestfailure}">
            <!-- local connector properties -->
            <sysproperty key="bundleJar" value="${basedir}/${contract.jar.file}"/>
            <sysproperty key="bundleVersion" value="${ConnectorBundle-Version}"/>
            <sysproperty key="bundleName" value="${ConnectorBundle-Name}"/>
            <!-- connector server properties -->            
            <sysproperty key="serverHost" value="${serverHost}"/>
            <sysproperty key="serverPort" value="${serverPort}"/>
            <sysproperty key="serverKey" value="${serverKey}"/>
            <sysproperty key="useConnectorServer" value="${useConnectorServer}"/>            
            <!-- common properties -->            
            <sysproperty key="data-provider" value="${data.provider}"/>            
            <sysproperty key="project.name" value="${ant.project.name}"/>
            <sysproperty key="testConfig" value="${testConfig}"/>
            <sysproperty key="connectorName" value="${connectorName}"/>
            <sysproperty key="test.parameters.outFile" value="${test.parameters.outFile}"/>
            <sysproperty key="org.identityconnectors.common.logging.class" value="org.identityconnectors.common.logging.impl.JDKLogger"/>
            
            <test todir="${reports}/contracts" outfile="TEST-${contract-package}.test.ContractTestSuite-${testConfig}"
                name="${contract.suite.classname}"/>
            <formatter type="xml" />
            <formatter type="brief" usefile="false" unless="useExternalReporting" />
            <classpath>
                <path refid="contract.classpath"/>
            </classpath>
        </junit>
    </target>

    <target name="run-contract-tests" depends="contract-init, contract-dist, contract-tests"/>
    
    <target name="run-cs-contract-tests" depends="contract-init-cs, contract-init, contract-tests"/>
    
    <target name="contract-init-cs">
        <property name="useConnectorServer" value="true"/>
        <property name="serverHost" value=""/>
        <property name="serverPort" value=""/>
        <property name="serverKey" value=""/>
    </target>
    
    <target name="console" depends="jar">
        <java classname="groovy.ui.Console" dir="${basedir}" classpathref="console.path" fork="true" spawn="true"/>
        <echo message="Loading Groovy Console..."/>
    </target>
      
    <presetdef name="javadoc" uri="internal:tasks">
        <javadoc />
    </presetdef>
    
    <target name="javadoc" description="generates javadoc">
        <delete dir="${dist}/javadoc" />
        <mkdir dir="${dist}/javadoc" />
        <javadoc overview="${src.main.java}/overview.html"
            author="true" version="true" source="1.5"
            classpathref="build.path" destdir="${dist}/javadoc" 
            sourcepath="${framework.dir}/framework/src/main/java"
            excludepackagenames="org.identityconnectors.framework.*,org.identityconnectors.common.*">
            <fileset dir="${src.main.java}" includes="**/*.java" excludes="**/*Test*"/>
        </javadoc>
    </target>
    <target name="all" depends="clean, dist, findbugs, test"/>
</project>
