/*
 * ====================
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.     
 * 
 * The contents of this file are subject to the terms of the Common Development 
 * and Distribution License("CDDL") (the "License").  You may not use this file 
 * except in compliance with the License.
 * 
 * You can obtain a copy of the License at 
 * http://IdentityConnectors.dev.java.net/legal/license.txt
 * See the License for the specific language governing permissions and limitations 
 * under the License. 
 * 
 * When distributing the Covered Code, include this CDDL Header Notice in each file
 * and include the License file at identityconnectors/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the fields 
 * enclosed by brackets [] replaced by your own identifying information: 
 * "Portions Copyrighted [year] [name of copyright owner]"
 * ====================
 */
package org.identityconnectors.toolkitmodule;

import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;

public final class inputVisualPanel2 extends JPanel {

    private static final Map<String, Integer> ops = new TreeMap<String, Integer>();
    static { //The names here do not matter but they MUST map to the same number
             //as the map in the toolkit's creator.groovy
             ops.put("AdvancedUpdate", 1);
             ops.put("Authenticate", 2);
             ops.put("Create", 3);
             ops.put("Delete", 4);
             ops.put("Schema", 5);
             ops.put("ScriptOnConnector", 6);
             ops.put("ScriptOnResource", 7);
             ops.put("Search", 8);
             ops.put("Sync", 9);
             ops.put("Test", 10);
             ops.put("Update", 11);
    }

    private DefaultListModel leftModel, rightModel;

    /** Creates new form inputVisualPanel2 */
    public inputVisualPanel2() {
        initComponents();
        leftModel = new DefaultListModel();
        rightModel = new DefaultListModel();
        for(String op: ops.keySet()) {
            leftModel.addElement(op);
        }
        lstAvailableOps.setModel(leftModel);
        lstSelectedOps.setModel(rightModel);
    }

    public Map<String, Integer> getSPIOps() {
        return ops;
    }

    @Override
    public String getName() {
        return "Choose SPI Operations";
    }

    JList getLstSelectedOps() {
        return lstSelectedOps;
    }

    private void sort(DefaultListModel model) {
        Vector<String> list = new Vector<String>();
        //read out
        for(int i = 0; i < model.size(); i++) {
           list.add((String) model.get(i));
        }
        Collections.sort(list);
        model.clear();
        //write back
        for(int i = 0; i < list.size(); i++) {
           model.addElement(list.get(i));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstAvailableOps = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSelectedOps = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnAddAll = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        lblAvailableOps = new javax.swing.JLabel();
        lblSelectedOps = new javax.swing.JLabel();

        jScrollPane1.setViewportView(lstAvailableOps);

        jScrollPane2.setViewportView(lstSelectedOps);

        org.openide.awt.Mnemonics.setLocalizedText(btnAdd, "Add Selected"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRemove, "Remove Selected"); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnAddAll, "Add All >>"); // NOI18N
        btnAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRemoveAll, "<< Remove All"); // NOI18N
        btnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblAvailableOps, "Available SPI Operations:"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblSelectedOps, "Selected SPI Operations:"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .add(lblAvailableOps))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnRemoveAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnAddAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnRemove, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnAdd, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .add(lblSelectedOps))
                .add(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lblAvailableOps)
                    .add(lblSelectedOps))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(btnAdd)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnRemove)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnAddAll)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnRemoveAll))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane2)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))))
                .add(52, 52, 52))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Object[] vals = lstAvailableOps.getSelectedValues();
        for(Object obj : vals) {
            leftModel.removeElement(obj);
            rightModel.addElement(obj);
        }
        sort(rightModel);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        Object[] vals = lstSelectedOps.getSelectedValues();
        for(Object obj : vals) {
            leftModel.addElement(obj);
            rightModel.removeElement(obj);
        }
        sort(leftModel);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllActionPerformed
        while(leftModel.size() > 0) {
            String str = (String) leftModel.get(0);
            leftModel.remove(0);
            rightModel.addElement(str);
        }
        sort(rightModel);
    }//GEN-LAST:event_btnAddAllActionPerformed

    private void btnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllActionPerformed
        while(rightModel.size() > 0) {
            String str = (String) rightModel.get(0);
            rightModel.remove(0);
            leftModel.addElement(str);
        }
        sort(leftModel);
    }//GEN-LAST:event_btnRemoveAllActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAvailableOps;
    private javax.swing.JLabel lblSelectedOps;
    private javax.swing.JList lstAvailableOps;
    private javax.swing.JList lstSelectedOps;
    // End of variables declaration//GEN-END:variables
}

