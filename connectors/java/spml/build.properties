# -- START LICENSE
# ====================
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
# Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.     
# 
# The contents of this file are subject to the terms of the Common Development 
# and Distribution License("CDDL") (the "License").  You may not use this file 
# except in compliance with the License.
# 
# You can obtain a copy of the License at 
# http://IdentityConnectors.dev.java.net/legal/license.txt
# See the License for the specific language governing permissions and limitations 
# under the License. 
# 
# When distributing the Covered Code, include this CDDL Header Notice in each file
# and include the License file at identityconnectors/legal/license.txt.
# If applicable, add the following below this CDDL Header, with the fields 
# enclosed by brackets [] replaced by your own identifying information: 
# "Portions Copyrighted [year] [name of copyright owner]"
# ====================
# -- END LICENSE
##
## Manifest properties
## Refer to https://openconnectors.dev.java.net/connector_bundles.html
##
MAJOR=1
MINOR=0
ConnectorBundle-FrameworkVersion=1.1
ConnectorBundle-Name=org.identityconnectors.spml
connectorName=org.identityconnectors.spml.SpmlConnector

# +--------------------------------------+
# | Properties to control contract tests |
# +--------------------------------------+

bundleJar.testsuite.string=${SYSPROPS, connector-jar}

# Configuration Properties
#
# move private properties to ${user.home}/ConnectorSPML.properties
userName.connector.string=Configurator
password.connector.string=configurator
hostNameOrIpAddr.connector.string=localhost
#
hostPortNumber.connector.integer=${INTEGER,8080}
file.connector.string=/idm/servlet/openspml2
protocol.connector.string=http
mapSetNameCommand.connector.string=\
if (org.identityconnectors.framework.common.objects.Name.NAME.equals(name))\n\
    return getNameAttribute(configuration, objectClass);\n\
if (org.identityconnectors.framework.common.objects.OperationalAttributes.PASSWORD_NAME.equals(name))\n\
    return "credentials";\n\
return name;\n\
private String getNameAttribute(org.identityconnectors.spml.SpmlConfiguration configuration, String objectClass) {\n\
    for (int i=0; i<configuration.getObjectClassNames().length; i++) \n\
        if (configuration.getObjectClassNames()[i].equals(objectClass))\n\
            return configuration.getNameAttributes()[i];\n\
    return "";\n\
}\n
postConnectCommand.connector.string=class GuardedStringAccessor implements org.identityconnectors.common.security.GuardedString.Accessor {\n    private char[] _array;\n    public void access(char[] clearChars) {\n        _array \= new char[clearChars.length];\n        System.arraycopy(clearChars, 0, _array, 0, _array.length);            \n    }\n    public char[] getArray() {\n        return _array;\n    }\n    public void clear() {\n        //Arrays.fill(_array, 0, _array.length, ' ');\n    }\n}\naccessor \= new GuardedStringAccessor();\npassword.access(accessor);\npasswordString \= new String(accessor.getArray());\naccessor.clear();\nrequest \= new org.openspml.v2.msg.spml.ListTargetsRequest();\nrequest.addOpenContentElement(new org.openspml.v2.util.xml.OperationalNameValuePair("accountId", username));\nrequest.addOpenContentElement(new org.openspml.v2.util.xml.OperationalNameValuePair("password", passwordString));\nrequest.setExecutionMode(org.openspml.v2.msg.spml.ExecutionMode.SYNCHRONOUS);\nresponse \= connection.send(request);\noces \= response.getOpenContentElements();\nmemory.session \= oces[0]\n
preDisconnectCommand.connector.string=class GuardedStringAccessor implements org.identityconnectors.common.security.GuardedString.Accessor {\n    private char[] _array;\n    public void access(char[] clearChars) {\n        _array \= new char[clearChars.length];\n        System.arraycopy(clearChars, 0, _array, 0, _array.length);            \n    }\n    public char[] getArray() {\n        return _array;\n    }\n    public void clear() {\n        //Arrays.fill(_array, 0, _array.length, ' ');\n    }\n}\naccessor \= new GuardedStringAccessor();\npassword.access(accessor);\npasswordString \= new String(accessor.getArray());\naccessor.clear();\nif (\!passwordString.equals("configurator")) throw new RuntimeException("disconnect failure
preSendCommand.connector.string=\
if (memory.session\!\=null)request.addOpenContentElement(memory.session);\n\
if (request instanceof org.openspml.v2.msg.spml.AddRequest) request.getData().addOpenContentElement(new org.openspml.v2.profiles.dsml.DSMLAttr("type", "User"));
mapQueryNameCommand.connector.string=\
if (org.identityconnectors.framework.common.objects.OperationalAttributes.PASSWORD_NAME.equals(name))\n\
    return "credentials";\n\
else if (org.identityconnectors.framework.common.objects.Name.NAME.equals(name))\n\
    return "name";\n\
return name;
schemaCommand.connector.string=\
if (org.identityconnectors.framework.common.objects.ObjectClass.ACCOUNT_NAME.equals(objectClass)) {\n\
    for (org.identityconnectors.framework.common.objects.AttributeInfo info : attributeInfos) {\n\
	       if (info.getName().equals("objectclass")) {\n\
            attributeInfos.remove(info);\n\
            break;\n\
        }\n\
    }\n\
    for (org.identityconnectors.framework.common.objects.AttributeInfo info : attributeInfos) {\n\
	       if (info.getName().equals("credentials")) {\n\
            attributeInfos.remove(info);\n\
            break;\n\
        }\n\
    }\n\
    for (org.identityconnectors.framework.common.objects.AttributeInfo info : attributeInfos) {\n\
	       if (info.getName().equals("accountId")) {\n\
            attributeInfos.remove(info);\n\
            break;\n\
        }\n\
    }\n\
    attributeInfos.add(org.identityconnectors.framework.common.objects.OperationalAttributeInfos.PASSWORD);\n\
    attributeInfos.add(asNotByDefault(org.identityconnectors.framework.common.objects.OperationalAttributeInfos.ENABLE));\n\
    //attributeInfos.add(asCreatable("objectclass"));\n\
    attributeInfos.add(asNotUpdateable(org.identityconnectors.framework.common.objects.Name.NAME));\n\
}\n\
private org.identityconnectors.framework.common.objects.AttributeInfo asWriteOnly(org.identityconnectors.framework.common.objects.AttributeInfo original) {\n\
    org.identityconnectors.framework.common.objects.AttributeInfoBuilder builder = new org.identityconnectors.framework.common.objects.AttributeInfoBuilder();\n\
    builder.setMultiValue(original.isMultiValue());\n\
    builder.setName(original.getName());\n\
    builder.setReadable(original.isReadable());\n\
    builder.setRequired(original.isRequired());\n\
    builder.setReturnedByDefault(false);\n\
    builder.setType(original.getType());\n\
    builder.setCreateable(false);\n\
    builder.setUpdateable(false);\n\
    return builder.build();\n\
}    \n\
\n\
private org.identityconnectors.framework.common.objects.AttributeInfo asCreatable(String name) {\n\
    org.identityconnectors.framework.common.objects.AttributeInfoBuilder builder = new org.identityconnectors.framework.common.objects.AttributeInfoBuilder();\n\
    builder.setMultiValue(false);\n\
    builder.setName(name);\n\
    builder.setReadable(false);\n\
    builder.setRequired(true);\n\
    builder.setReturnedByDefault(false);\n\
    builder.setType(java.lang.String.class);\n\
    builder.setCreateable(true);\n\
    builder.setUpdateable(false);\n\
    return builder.build();\n\
}    \n\
\n\
private org.identityconnectors.framework.common.objects.AttributeInfo asNotUpdateable(String name) {\n\
    org.identityconnectors.framework.common.objects.AttributeInfoBuilder builder = new org.identityconnectors.framework.common.objects.AttributeInfoBuilder();\n\
    builder.setMultiValue(false);\n\
    builder.setName(name);\n\
    builder.setReadable(true);\n\
    builder.setRequired(true);\n\
    builder.setReturnedByDefault(true);\n\
    builder.setType(java.lang.String.class);\n\
    builder.setCreateable(true);\n\
    builder.setUpdateable(false);\n\
    return builder.build();\n\
}    \n\
\n\
private org.identityconnectors.framework.common.objects.AttributeInfo asNotByDefault(org.identityconnectors.framework.common.objects.AttributeInfo original) {\n\
    org.identityconnectors.framework.common.objects.AttributeInfoBuilder builder = new org.identityconnectors.framework.common.objects.AttributeInfoBuilder();\n\
    builder.setMultiValue(original.isMultiValue());\n\
    builder.setName(original.getName());\n\
    builder.setReadable(original.isReadable());\n\
    builder.setRequired(original.isRequired());\n\
    builder.setReturnedByDefault(false);\n\
    builder.setType(original.getType());\n\
    builder.setCreateable(original.isCreateable());\n\
    builder.setUpdateable(original.isUpdateable());\n\
    return builder.build();\n\
}
postReceiveCommand.connector.string=\
if (response\=\=null) throw new RuntimeException("post receive failure");
mapAttributeCommand.connector.string=\
if (attribute.getName().equalsIgnoreCase("credentials"))\n\
    return org.identityconnectors.framework.common.objects.AttributeBuilder.buildPassword(new org.identityconnectors.common.security.GuardedString(((String)attribute.getValue().get(0)).toCharArray()));\n\
else if (attribute.getName().equalsIgnoreCase(getNameAttribute(configuration, objectClass)))\n\
    return new org.identityconnectors.framework.common.objects.Name((String)attribute.getValue().get(0));\n\
return attribute;\n\
private String getNameAttribute(org.identityconnectors.spml.SpmlConfiguration configuration, String objectClass) {\n\
    for (int i=0; i<configuration.getObjectClassNames().length; i++) \n\
        if (configuration.getObjectClassNames()[i].equals(objectClass))\n\
            return configuration.getNameAttributes()[i];\n\
    return "";\n\
}\n
targetNames.connector.stringarray=${ARRAY, java.lang.String, spml2-DSML-Target}
objectClassNames.connector.stringarray=${ARRAY, java.lang.String, account}
spmlClassNames.connector.stringarray=${ARRAY, java.lang.String, spml2Person}
nameAttributes.connector.stringarray=${ARRAY, java.lang.String, accountId}

# Configuration tests
#
iterations.Validate.testsuite.integer=3
1.wrong.targetNames.connector.stringarray=${LIST, spml2-DSML-Target, spml2-DSML-Target2}
2.wrong.userName.connector.string=
3.wrong.hostPortNumber.connector.integer=${INTEGER,100000}

# Account Attributes
#
oclasses.Schema.testsuite.list=${LIST, account}
attributes.account.oclasses.Schema.testsuite.list=${LIST, __NAME__, __PASSWORD__, __ENABLE__, firstname, lastname, emailAddress}
#objectclass, 
__NAME__.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, java.lang.String}, \
                                                            ${MAPENTRY, readable, true}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, false}, \
                                                            ${MAPENTRY, required, true}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, true} \
                                                        }
__PASSWORD__.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, org.identityconnectors.common.security.GuardedString}, \
                                                            ${MAPENTRY, readable, false}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, true}, \
                                                            ${MAPENTRY, required, true}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, true} \
                                                        }
__ENABLE__.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, boolean}, \
                                                            ${MAPENTRY, readable, true}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, true}, \
                                                            ${MAPENTRY, required, false}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, false} \
                                                        }
#objectclass.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
#                                                            ${MAPENTRY, type, java.lang.String}, \
#                                                            ${MAPENTRY, readable, false}, \
#                                                            ${MAPENTRY, createable, true}, \
#                                                            ${MAPENTRY, updateable, false}, \
#                                                            ${MAPENTRY, required, true}, \
#                                                            ${MAPENTRY, multiValue, false}, \
#                                                            ${MAPENTRY, returnedByDefault, false} \
#                                                        }
firstname.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, java.lang.String}, \
                                                            ${MAPENTRY, readable, true}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, true}, \
                                                            ${MAPENTRY, required, false}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, true} \
                                                        }
lastname.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, java.lang.String}, \
                                                            ${MAPENTRY, readable, true}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, true}, \
                                                            ${MAPENTRY, required, false}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, true} \
                                                        }
emailAddress.attribute.account.oclasses.Schema.testsuite.map=${MAP, \
                                                            ${MAPENTRY, type, java.lang.String}, \
                                                            ${MAPENTRY, readable, true}, \
                                                            ${MAPENTRY, createable, true}, \
                                                            ${MAPENTRY, updateable, true}, \
                                                            ${MAPENTRY, required, false}, \
                                                            ${MAPENTRY, multiValue, false}, \
                                                            ${MAPENTRY, returnedByDefault, true} \
                                                        }
operations.Schema.testsuite.map=${MAP, \
                                    ${MAPENTRY, ScriptOnConnectorApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, GetApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, SchemaApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, ValidateApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, CreateApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, SearchApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, DeleteApiOp, ${LIST, account}}, \
                                    ${MAPENTRY, UpdateApiOp, ${LIST, account}} \
                                }     
                                
# The only supported objectclass is spml2Person
#account.objectclass.string=spml2Person
#account.added.string=${NOTSUPPLIED}
#account.modified.string=${NOTSUPPLIED}
