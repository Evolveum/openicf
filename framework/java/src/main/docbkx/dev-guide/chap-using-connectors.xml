<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2012 ForgeRock AS
  !    
-->
<chapter xml:id='chap-using-connectors'
 xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Using Connectors</title>

 <orderedlist>
  <para>Your application accesses the connector API through the
  <literal>ConnectorFacade</literal> class, performing all interaction with the
  connector through the <literal>ConnectorFacade</literal> instance. To create
  a <literal>ConnectorFacade</literal>, follow these steps:</para>
  <listitem>
   <para>Create a <literal>ConnectorInfoManager</literal> and a
   <literal>ConnectorKey</literal> for the connector.</para>
  </listitem>
  <listitem>
   <para>Using the manager and the key, create a
   <literal>ConnectorInfo</literal> instance.</para>
  </listitem>
  <listitem>
   <para>From the <literal>ConnectorInfo</literal> object, create the default
   <literal>APIConfiguration</literal>.</para>
  </listitem>
  <listitem>
   <para>From the default <literal>APIConfiguration</literal>, retrieve the
   <literal>ConfigurationProperties</literal>.</para>
  </listitem>
  <listitem>
   <para>Set all of the <literal>ConfigurationProperties</literal> you need for
   the connector using <literal>setPropertyValue()</literal>.</para>
  </listitem>
  <listitem>
   <para>Use the <literal>ConnectorFacadeFactory.newInstance()</literal> method
   to create a new instance of the connector.</para>
  </listitem>
 </orderedlist>

 <para>The following example demonstrates how to create the
 <literal>ConnectorFacade</literal>.</para>

 <programlisting language="java">
// Use the ConnectorInfoManager to retrieve a ConnectorInfo object for
// the connector.
ConnectorInfoManagerFactory fact = ConnectorInfoManagerFactory
        .getInstance();
File bundleDirectory = new File("/connectorDir/bundles/foobar");
URL url = IOUtil.makeURL(bundleDirectory,
        "/dist/org.identityconnectors.foobar-1.0.jar");
ConnectorInfoManager manager = fact.getLocalManager(url);
ConnectorKey key = new ConnectorKey("org.identityconnectors.foobar",
        "1.0", "FooBarConnector");
ConnectorInfo info = manager.findConnectorInfo(key);

// From the ConnectorInfo object, create the default APIConfiguration.
APIConfiguration apiConfig = info.createDefaultAPIConfiguration();

// From the default APIConfiguration, retrieve the ConfigurationProperties.
ConfigurationProperties properties = apiConfig
        .getConfigurationProperties();

// Print out what the properties are (not necessary).
List&lt;String&gt; propertyNames = properties.getPropertyNames();
for(String propName : propertyNames) {
    ConfigurationProperty prop = properties.getProperty(propName);
    System.out.println("Property Name: " + prop.getName() +
            "\tProperty Type: " + prop.getType());
}

// Set all of the ConfigurationProperties needed by the connector.
properties.setPropertyValue("host", FOOBAR_HOST);
properties.setPropertyValue("adminName", FOOBAR_ADMIN);
properties.setPropertyValue("adminPassword", FOOBAR_PASSWORD);
properties.setPropertyValue("useSSL", false);

// Use the ConnectorFacadeFactory's newInstance() method to get a
// new connector.
ConnectorFacade conn = ConnectorFacadeFactory.getInstance()
        .newInstance(apiConfig);

// Make sure you have set up the Configuration properly.
conn.validate();

// Start using the Connector.
conn.[authenticate|create|update|delete|search|...]</programlisting>

 <section xml:id="getting-supported-operations">
  <title>Getting Supported Operations</title>

  <para>When your connector is ready to use, you can find out from the
  <literal>ConnectorFacade</literal> what operations it supports. The quickest
  check involves determining whether a particular operation is part of the set
  of supported operations.</para>

  <programlisting language="java">
Set&lt;Class&lt; ? extends APIOperation>> ops = conn.getSupportedOperations();
// Check whether CreateApiOp is supported, for example.
return ops.contains(CreateApiOp.class);</programlisting>

  <para>Connectors might support operations only for specific object classes,
  however. For example, you might be able to create a person, but not a
  group. The more correct way to check whether the connector supports a
  particular operation also involves the object class on which you plan to
  perform the operation.</para>

  <programlisting language="java">
Schema schema = conn.schema();
Set&lt;ObjectClassInfo> objectClasses = schema.getObjectClassInfo();
Set&lt;ObjectClassInfo> ocinfos = schema
        .getSupportedObjectClassesByOperation(CreateApiOp.class);

for(ObjectClassInfo oci : objectClasses) {
    // Check that the operation is supported for your object class.
    if (ocinfos.contains(ocinfo)) {
        // object class is supported
    }
}</programlisting>
 </section>

 <section xml:id="checking-schema">
  <title>Checking Schema</title>

  <para>In addition to supported operations for an object class, your
  application can find out which attributes are required and allowed for a
  particular object class. <literal>ObjectClassInfo</literal> contains this
  information as a set of <literal>AttributeInfo</literal> objects.</para>

  <programlisting language="java">
Schema schema = conn.schema();
Set&lt;ObjectClassInfo> objectClasses = schema.getObjectClassInfo();
for(ObjectClassInfo oci : objectClasses) {
    Set&lt;AttributeInfo> attributeInfos = oci.getAttributeInfo();
    String type = oci.getType();
    if(ObjectClass.ACCOUNT_NAME.equals(type)) {
        for(AttributeInfo info : attributeInfos) {
            System.out.println(info.toString());
        }
    }
}</programlisting>
 </section>

 <section xml:id="creating-objects">
  <title>Creating Objects</title>

  <para>You create a new object by using
  <literal>ConnectorFacade.create()</literal> after setting up the
  <literal>ConnectorFacade</literal>, checking that the operation is
  supported, and making sure you can set at least all the required
  attributes. The <literal>ConnectorFacade.create()</literal> method takes
  the object class and the set of attributes as its arguments. The object
  class specifies the type of <literal>ConnectorObject</literal> (account,
  group, and so forth) to create. The attributes describe the connector
  object (name, password, members, and so forth). The object class and
  allowed and required attributes are identified in the connector schema.
  The following example shows a code fragment that creates an account.</para>

  <programlisting language="java">
Set&lt;Attribute> attrs = new HashSet&lt;Attribute>();
attrs.add(new Name("MyUser"));
attrs.add(AttributeBuilder.buildPassword("secret12"));
attrs.add(AttributeBuilder.build("Company", "ForgeRock AS"));
Uid userUid = conn.create(ObjectClass.ACCOUNT, attrs);</programlisting>
 </section>

 <section xml:id="updating-passwords">
  <title>Updating Passwords</title>

  <para>Passwords are of a special type, called an operational attribute.
  Another operational attribute is <literal>Enabled</literal>. You create
  these attributes using static <literal>AttributeBuilder</literal>
  methods. The following example shows a code fragment to update the
  password of the account created in the previous example.</para>

  <programlisting language="java">
Set&lt;Attribute> attrs = new HashSet&lt;Attribute>();
attrs.add(new Name("MyUser"));
attrs.add(AttributeBuilder.buildPassword("newPassword"));
Uid userUid = conn.update(ObjectClass.ACCOUNT, attrs);</programlisting>
 </section>

 <section xml:id="deleting-objects">
  <title>Deleting Objects</title>

  <para>You delete accounts by object class and <literal>Uid</literal>. If the
  connector supports the search operation for accounts, you can look up
  the UID using an attribute value that you know already, such as the
  <literal>username</literal>.</para>

  <programlisting language="java">
Uid userUid = findUid(userName);
conn.delete(ObjectClass.ACCOUNT, userUid);</programlisting>
 </section>

 <section xml:id="searching">
  <title>Searching</title>

  <para>If the connector supports searching for your object class, then you can
  use <literal>ConnectorFacade.search()</literal>.  To set up your search,
  create a <literal>Filter</literal> and also a
  <literal>ResultsHandler</literal>. The filter sets up what to match on
  the connected resource, and must fit the schema for the object class.
  The following code fragment uses a compound filter and handler to
  display the results found.</para>

  <programlisting language="java">
Filter leftFilter = FilterBuilder.equalTo(AttributeBuilder
        .build("FIRSTNAME", "John"));
Filter rightFilter = FilterBuilder.equalTo(AttributeBuilder
        .build("DEPARTMENT", "Engineering"));
Filter filter = FilterBuilder.and(leftFilter, rightFilter);
final List&lt;ConnectorObject> results = new ArrayList&lt;ConnectorObject>();
ResultsHandler handler = new ResultsHandler() {
    public boolean handle(ConnectorObject obj) {
        results.add(obj);
        return true;
    }
};

conn.search(ObjectClass.ACCOUNT, filter, handler);
for(ConnectorObject obj : results ) {
    System.out.println("Name: " + obj.getName() +
            "\tUID: " + obj.getUid());
}</programlisting>

  <para>You can also search with an operational attribute in the filter, such as
  a search for disabled accounts.</para>

  <programlisting language="java">
Filter nameFilter = FilterBuilder.startsWith(new Name("John"));
Filter enabledFilter = FilterBuilder.equalTo(AttributeBuilder
        .buildEnabled(false));     // Account is disabled.
Filter filter = FilterBuilder.or(nameFilter, enabledFilter);
final List&lt;ConnectorObject> results = new ArrayList&lt;ConnectorObject>();
ResultsHandler handler = new ResultsHandler() {
    public boolean handle(ConnectorObject obj) {
        results.add(obj);
        return true;
    }
};

conn.search(ObjectClass.ACCOUNT, filter, handler);
for(ConnectorObject obj : results ) {
    System.out.println("Name: " + obj.getName() +
            "\tUID: " + obj.getUid());
}</programlisting>
 </section>

 <section xml:id="getting-the-object-class">
  <title>Getting the Object Class</title>

  <para>When you have an <literal>ObjectClassInfo</literal> and want to get the
  <literal>ObjectClass</literal>, do the following in your application.</para>

  <programlisting language="java">
ObjectClass objectClass = new ObjectClass(objectClassInfo.getType());</programlisting>
 </section>
</chapter>
